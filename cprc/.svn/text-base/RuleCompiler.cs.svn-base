/* Generated By:CSharpCC: Do not edit this line. RuleCompiler.cs */
namespace cjo.cplib {


using System;
using System.IO;
using System.Text;
using System.Collections;

class RuleCompiler : RuleCompilerConstants {
    private char[] trimchars = new char[] {'\'','\"'};
        private ValueManager _Values = new ValueManager();
    private MapStack _InStack = new MapStack();
    private MapStack _OutStack = new MapStack();
    private StreamWriter _Outfile;

        public void Compile(string outfile)
        {

       _Outfile = File.CreateText(outfile);

                Statement();

        _Outfile.Close();

                System.Console.WriteLine(_Values.ToString());

                System.Console.WriteLine("done!");
        }

    private void PrintPattern(Pattern[] patterns, int curridx)
    {
        if (patterns.Length > curridx + 1)
            PrintPattern(patterns, curridx + 1);

        Pattern p = patterns[curridx];
        foreach (Map map in p.Maps)
        {
            _InStack.Push(map.In);
            _OutStack.Push(map.Out);
        }
    }

  public void Statement() {
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case DEFINE:
      case WEIGHT:
      case PATTERN:
      case RULE:
        ;
        break;
      default:
        mcc_la1[0] = mcc_gen;
        goto label_1;
      }
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case DEFINE:
        TokenDefinition();
        break;
      case WEIGHT:
        WeightDefinition();
        break;
      case PATTERN:
        PatternDefinition();
        break;
      case RULE:
        RuleDefinition();
        break;
      default:
        mcc_la1[1] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
    }label_1: ;
    
  }

  public void TokenDefinition() {
        Token tname = null;
        Token tvalue = null;
    mcc_consume_token(DEFINE);
    tname = mcc_consume_token(IDENTIFIER);
    tvalue = mcc_consume_token(STRING_LITERAL);
              _Values.Add(tname.image, tvalue.image.Trim(trimchars));
  }

  public void WeightDefinition() {
        Token tname = null;
        Token tvalue = null;
    mcc_consume_token(WEIGHT);
    tname = mcc_consume_token(IDENTIFIER);
    tvalue = mcc_consume_token(DECIMAL_LITERAL);
              _Values.Add(tname.image, tvalue.image);
  }

  public void PatternDefinition() {
        Token t = null;
        Pattern pattern = new Pattern();
    mcc_consume_token(PATTERN);
    t = mcc_consume_token(IDENTIFIER);
           pattern.Name = t.image;
    mcc_consume_token(18);
    MapList(pattern);
    mcc_consume_token(19);
               _Values.AddPattern(pattern);
  }

  public void MapList(Pattern pattern) {
    Map(pattern);
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        mcc_la1[2] = mcc_gen;
        goto label_2;
      }
      Map(pattern);
    }label_2: ;
    
  }

  public void Map(Pattern pattern) {
        string inmap = null;
        string outmap =  null;
    inmap = IdentList();
    mcc_consume_token(MAPPER);
    outmap = IdentList();
    mcc_consume_token(20);
           Map m = new Map();
       m.In = inmap;
       m.Out = outmap;
       pattern.Maps.Add(m);
  }

  public string IdentList() {
        Token t = null;
        string val = null;
        StringBuilder sb = new StringBuilder();
    t = mcc_consume_token(IDENTIFIER);
            val = _Values.Get(t.image);
                if (val == null) {throw new ParseException("Define not found: " + t.image);}
                    sb.Append(val);
    while (true) {
      if (mcc_2_1(2)) {
        ;
      } else {
        goto label_3;
      }
      mcc_consume_token(21);
      t = mcc_consume_token(IDENTIFIER);
                val = _Values.Get(t.image);
                if (val == null) {throw new ParseException("Define not found: " + t.image);}
                    sb.Append(val);
    }label_3: ;
    
              {return sb.ToString();}
    throw new Exception("Missing return statement in function");
  }

  public void RuleDefinition() {
    Token t = null;
    string weight = null;
    Pattern[] patterns = null;
    StringBuilder mapstr = new StringBuilder();
    mcc_consume_token(RULE);
    t = mcc_consume_token(IDENTIFIER);
    mcc_consume_token(22);
    patterns = PatternList();
           if (patterns != null)
            {
                PrintPattern(patterns, 0);

                weight = _Values.Get(t.image);
                if (weight == null) {throw new ParseException("Weight not found: " + t.image);}

                mapstr.Append(weight + ",");
                foreach (string s in _InStack.stack)
                {
                    mapstr.Append(s + " ");
                }
                _InStack.stack.Clear();
                mapstr.Remove(mapstr.Length - 1, 1);
                mapstr.Append(",");
                foreach (string s in _OutStack.stack)
                {
                    mapstr.Append(s + " ");
                }
                _OutStack.stack.Clear();
                mapstr.Remove(mapstr.Length - 1, 1);
                _Outfile.WriteLine(mapstr.ToString());
            }
    mcc_consume_token(23);
  }

  public Pattern[] PatternList() {
    Map[] maps;
    PatternHolder ph = new PatternHolder();
    maps = MapSelection();
       if (maps != null)
       {
           Pattern p = new Pattern();
           foreach (Map m in maps)
               p.Maps.Add(m);
           ph.Patterns.Add(p);
       }
    while (true) {
      if (mcc_2_2(2)) {
        ;
      } else {
        goto label_4;
      }
      mcc_consume_token(21);
      maps = MapSelection();
       if (maps != null)
       {
           Pattern p = new Pattern();
           foreach (Map m in maps)
               p.Maps.Add(m);
           ph.Patterns.Add(p);
       }
    }label_4: ;
    
          {return ph.Patterns.ToArray();}
    throw new Exception("Missing return statement in function");
  }

  public Map[] MapSelection() {
    Token t = null;
    Token ti = null;
    int idx = -1;
    Map[] results;
    Pattern p = null;
    t = mcc_consume_token(IDENTIFIER);
    mcc_consume_token(24);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case ASTERISK:
      mcc_consume_token(ASTERISK);
            p = _Values.GetPattern(t.image);
                if (p == null) {throw new ParseException("Pattern not found: " + t.image);}
            results = p.Maps.ToArray();
      break;
    case DECIMAL_LITERAL:
      ti = mcc_consume_token(DECIMAL_LITERAL);
            p = _Values.GetPattern(t.image);
                if (p == null) {throw new ParseException("Pattern not found: " + t.image);}
            idx = Convert.ToInt32(ti.image) - 1;
            results = new Map[1];
            results[0] = p.Maps[idx];
      break;
    default:
      mcc_la1[3] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
            {return results;}
    throw new Exception("Missing return statement in function");
  }

  private bool mcc_2_1(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_1(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(0, xla); }
  }

  private bool mcc_2_2(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_2(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(1, xla); }
  }

  private bool mcc_3_2() {
    if (mcc_scan_token(21)) return true;
    if (mcc_3R_5()) return true;
    return false;
  }

  private bool mcc_3R_5() {
    if (mcc_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private bool mcc_3_1() {
    if (mcc_scan_token(21)) return true;
    if (mcc_scan_token(IDENTIFIER)) return true;
    return false;
  }

  public RuleCompilerTokenManager token_source;
  SimpleCharStream mcc_input_stream;
  public Token token, mcc_nt;
  private int mcc_ntk;
  private Token mcc_scanpos, mcc_lastpos;
  private int mcc_la;
  public bool lookingAhead = false;
  private bool mcc_semLA;
  private int mcc_gen;
  private int[] mcc_la1 = new int[4];
  static private int[] mcc_la1_0;
  static RuleCompiler() {
      mcc_gla1_0();
   }
   private static void mcc_gla1_0() {
      mcc_la1_0 = new int[] {7680,7680,32768,16512,};
   }
  private MccCalls[] mcc_2_rtns = new MccCalls[2];
  private bool mcc_rescan = false;
  private int mcc_gc = 0;

  public RuleCompiler(System.IO.Stream stream) {
    mcc_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new RuleCompilerTokenManager(mcc_input_stream);
    token = new Token();
    mcc_ntk = -1;
    mcc_gen = 0;
    for (int i = 0; i < 4; i++) mcc_la1[i] = -1;
    for (int i = 0; i < mcc_2_rtns.Length; i++) mcc_2_rtns[i] = new MccCalls();
  }

  public void ReInit(System.IO.Stream stream) {
    mcc_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(mcc_input_stream);
    token = new Token();
    mcc_ntk = -1;
    mcc_gen = 0;
    for (int i = 0; i < 4; i++) mcc_la1[i] = -1;
    for (int i = 0; i < mcc_2_rtns.Length; i++) mcc_2_rtns[i] = new MccCalls();
  }

  public RuleCompiler(System.IO.TextReader stream) {
    mcc_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new RuleCompilerTokenManager(mcc_input_stream);
    token = new Token();
    mcc_ntk = -1;
    mcc_gen = 0;
    for (int i = 0; i < 4; i++) mcc_la1[i] = -1;
    for (int i = 0; i < mcc_2_rtns.Length; i++) mcc_2_rtns[i] = new MccCalls();
  }

  public void ReInit(System.IO.TextReader stream) {
    mcc_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(mcc_input_stream);
    token = new Token();
    mcc_ntk = -1;
    mcc_gen = 0;
    for (int i = 0; i < 4; i++) mcc_la1[i] = -1;
    for (int i = 0; i < mcc_2_rtns.Length; i++) mcc_2_rtns[i] = new MccCalls();
  }

  public RuleCompiler(RuleCompilerTokenManager tm) {
    token_source = tm;
    token = new Token();
    mcc_ntk = -1;
    mcc_gen = 0;
    for (int i = 0; i < 4; i++) mcc_la1[i] = -1;
    for (int i = 0; i < mcc_2_rtns.Length; i++) mcc_2_rtns[i] = new MccCalls();
  }

  public void ReInit(RuleCompilerTokenManager tm) {
    token_source = tm;
    token = new Token();
    mcc_ntk = -1;
    mcc_gen = 0;
    for (int i = 0; i < 4; i++) mcc_la1[i] = -1;
    for (int i = 0; i < mcc_2_rtns.Length; i++) mcc_2_rtns[i] = new MccCalls();
  }

   private Token mcc_consume_token(int kind) {
    Token oldToken = null;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.GetNextToken();
    mcc_ntk = -1;
    if (token.kind == kind) {
      mcc_gen++;
      if (++mcc_gc > 100) {
        mcc_gc = 0;
        for (int i = 0; i < mcc_2_rtns.Length; i++) {
          MccCalls c = mcc_2_rtns[i];
          while (c != null) {
            if (c.gen < mcc_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    mcc_kind = kind;
    throw GenerateParseException();
  }

  private class LookaheadSuccess : System.Exception { }
  private LookaheadSuccess mcc_ls = new LookaheadSuccess();
  private bool mcc_scan_token(int kind) {
    if (mcc_scanpos == mcc_lastpos) {
      mcc_la--;
      if (mcc_scanpos.next == null) {
        mcc_lastpos = mcc_scanpos = mcc_scanpos.next = token_source.GetNextToken();
      } else {
        mcc_lastpos = mcc_scanpos = mcc_scanpos.next;
      }
    } else {
      mcc_scanpos = mcc_scanpos.next;
    }
    if (mcc_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != mcc_scanpos) { i++; tok = tok.next; }
      if (tok != null) mcc_add_error_token(kind, i);
    }
    if (mcc_scanpos.kind != kind) return true;
    if (mcc_la == 0 && mcc_scanpos == mcc_lastpos) throw mcc_ls;
    return false;
  }

  public Token GetNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.GetNextToken();
    mcc_ntk = -1;
    mcc_gen++;
    return token;
  }

  public Token GetToken(int index) {
    Token t = lookingAhead ? mcc_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.GetNextToken();
    }
    return t;
  }

  private int mcc_mntk() {
    if ((mcc_nt=token.next) == null)
      return (mcc_ntk = (token.next=token_source.GetNextToken()).kind);
    else
      return (mcc_ntk = mcc_nt.kind);
  }

  private System.Collections.ArrayList mcc_expentries = new System.Collections.ArrayList();
  private int[] mcc_expentry;
  private int mcc_kind = -1;
  private int[] mcc_lasttokens = new int[100];
  private int mcc_endpos;

  private void mcc_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == mcc_endpos + 1) {
      mcc_lasttokens[mcc_endpos++] = kind;
    } else if (mcc_endpos != 0) {
      mcc_expentry = new int[mcc_endpos];
      for (int i = 0; i < mcc_endpos; i++) {
        mcc_expentry[i] = mcc_lasttokens[i];
      }
      bool exists = false;
      for (System.Collections.IEnumerator e = mcc_expentries.GetEnumerator(); e.MoveNext();) {
        int[] oldentry = (int[])e.Current;
        if (oldentry.Length == mcc_expentry.Length) {
          exists = true;
          for (int i = 0; i < mcc_expentry.Length; i++) {
            if (oldentry[i] != mcc_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) mcc_expentries.Add(mcc_expentry);
      if (pos != 0) mcc_lasttokens[(mcc_endpos = pos) - 1] = kind;
    }
  }

  public ParseException GenerateParseException() {
    mcc_expentries.Clear();
    bool[] la1tokens = new bool[25];
    for (int i = 0; i < 25; i++) {
      la1tokens[i] = false;
    }
    if (mcc_kind >= 0) {
      la1tokens[mcc_kind] = true;
      mcc_kind = -1;
    }
    for (int i = 0; i < 4; i++) {
      if (mcc_la1[i] == mcc_gen) {
        for (int j = 0; j < 32; j++) {
          if ((mcc_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 25; i++) {
      if (la1tokens[i]) {
        mcc_expentry = new int[1];
        mcc_expentry[0] = i;
        mcc_expentries.Add(mcc_expentry);
      }
    }
    mcc_endpos = 0;
    mcc_rescan_token();
    mcc_add_error_token(0, 0);
    int[][] exptokseq = new int[mcc_expentries.Count][];
    for (int i = 0; i < mcc_expentries.Count; i++) {
      exptokseq[i] = (int[])mcc_expentries[i];
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  public void enable_tracing() {
  }

  public void disable_tracing() {
  }

  private void mcc_rescan_token() {
    mcc_rescan = true;
    for (int i = 0; i < 2; i++) {
      MccCalls p = mcc_2_rtns[i];
      do {
        if (p.gen > mcc_gen) {
          mcc_la = p.arg; mcc_lastpos = mcc_scanpos = p.first;
          switch (i) {
            case 0: mcc_3_1(); break;
            case 1: mcc_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    mcc_rescan = false;
  }

  private void mcc_save(int index, int xla) {
    MccCalls p = mcc_2_rtns[index];
    while (p.gen > mcc_gen) {
      if (p.next == null) { p = p.next = new MccCalls(); break; }
      p = p.next;
    }
    p.gen = mcc_gen + xla - mcc_la; p.first = token; p.arg = xla;
  }

  class MccCalls {
    public int gen;
    public Token first;
    public int arg;
    public MccCalls next;
  }

}
}
