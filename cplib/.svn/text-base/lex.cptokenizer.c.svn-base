#define yy_create_buffer cptokenizer_create_buffer
#define yy_delete_buffer cptokenizer_delete_buffer
#define yy_scan_buffer cptokenizer_scan_buffer
#define yy_scan_string cptokenizer_scan_string
#define yy_scan_bytes cptokenizer_scan_bytes
#define yy_flex_debug cptokenizer_flex_debug
#define yy_init_buffer cptokenizer_init_buffer
#define yy_flush_buffer cptokenizer_flush_buffer
#define yy_load_buffer_state cptokenizer_load_buffer_state
#define yy_switch_to_buffer cptokenizer_switch_to_buffer
#define yyin cptokenizerin
#define yyleng cptokenizerleng
#define yylex cptokenizerlex
#define yyout cptokenizerout
#define yyrestart cptokenizerrestart
#define yytext cptokenizertext

#line 19 "lex.cptokenizer.c"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef yyconst struct yy_trans_info *yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 17
#define YY_END_OF_BUFFER 18
struct yy_trans_info
	{
	short yy_verify;
	short yy_nxt;
	};
static yyconst struct yy_trans_info yy_transition[3867] =
    {
 {   0,   0 }, {   0,3611 }, {   0,   0 }, {   0,3609 }, {   1, 516 },
 {   2, 516 }, {   3, 516 }, {   4, 516 }, {   5, 516 }, {   6, 516 },
 {   7, 516 }, {   8, 516 }, {   9, 518 }, {  10, 520 }, {  11, 516 },
 {  12, 520 }, {  13, 522 }, {  14, 516 }, {  15, 516 }, {  16, 516 },
 {  17, 516 }, {  18, 516 }, {  19, 516 }, {  20, 516 }, {  21, 516 },
 {  22, 516 }, {  23, 516 }, {  24, 516 }, {  25, 516 }, {  26, 516 },
 {  27, 516 }, {  28, 516 }, {  29, 516 }, {  30, 516 }, {  31, 516 },
 {  32, 524 }, {  33, 538 }, {  34, 538 }, {  35, 516 }, {  36, 538 },
 {  37, 538 }, {  38, 516 }, {  39, 516 }, {  40, 538 }, {  41, 524 },
 {  42, 538 }, {  43, 538 }, {  44, 518 }, {  45, 524 }, {  46, 524 },

 {  47, 516 }, {  48, 617 }, {  49, 709 }, {  50, 801 }, {  51, 893 },
 {  52, 617 }, {  53, 617 }, {  54, 617 }, {  55, 617 }, {  56, 617 },
 {  57, 617 }, {  58, 516 }, {  59, 518 }, {  60, 538 }, {  61, 538 },
 {  62, 524 }, {  63, 538 }, {  64, 538 }, {  65, 985 }, {  66, 985 },
 {  67, 985 }, {  68, 985 }, {  69, 985 }, {  70, 985 }, {  71, 985 },
 {  72, 985 }, {  73, 985 }, {  74, 985 }, {  75, 985 }, {  76, 985 },
 {  77, 985 }, {  78, 985 }, {  79, 985 }, {  80, 985 }, {  81, 985 },
 {  82, 985 }, {  83, 985 }, {  84, 985 }, {  85, 985 }, {  86, 985 },
 {  87, 985 }, {  88, 985 }, {  89, 985 }, {  90, 985 }, {  91, 516 },
 {  92, 516 }, {  93, 516 }, {  94, 538 }, {  95, 524 }, {  96, 516 },

 {  97, 985 }, {  98, 985 }, {  99, 985 }, { 100, 985 }, { 101, 985 },
 { 102, 985 }, { 103, 985 }, { 104, 985 }, { 105, 985 }, { 106, 985 },
 { 107, 985 }, { 108, 985 }, { 109, 985 }, { 110, 985 }, { 111, 985 },
 { 112, 985 }, { 113, 985 }, { 114, 985 }, { 115, 985 }, { 116, 985 },
 { 117, 985 }, { 118, 985 }, { 119, 985 }, { 120, 985 }, { 121, 985 },
 { 122, 985 }, { 123, 538 }, { 124, 538 }, { 125, 524 }, { 126, 538 },
 { 127, 516 }, { 128, 516 }, { 129, 516 }, { 130, 516 }, { 131, 516 },
 { 132, 516 }, { 133, 516 }, { 134, 516 }, { 135, 516 }, { 136, 516 },
 { 137, 516 }, { 138, 516 }, { 139, 516 }, { 140, 516 }, { 141, 516 },
 { 142, 516 }, { 143, 516 }, { 144, 516 }, { 145, 516 }, { 146, 516 },

 { 147, 516 }, { 148, 516 }, { 149, 516 }, { 150, 516 }, { 151, 516 },
 { 152, 516 }, { 153, 516 }, { 154, 516 }, { 155, 516 }, { 156, 516 },
 { 157, 516 }, { 158, 516 }, { 159, 516 }, { 160, 516 }, { 161, 516 },
 { 162, 516 }, { 163, 516 }, { 164, 516 }, { 165, 516 }, { 166, 516 },
 { 167, 516 }, { 168, 516 }, { 169, 516 }, { 170, 516 }, { 171, 516 },
 { 172, 516 }, { 173, 516 }, { 174, 516 }, { 175, 516 }, { 176, 516 },
 { 177, 516 }, { 178, 516 }, { 179, 516 }, { 180, 516 }, { 181, 516 },
 { 182, 516 }, { 183, 516 }, { 184, 516 }, { 185, 516 }, { 186, 516 },
 { 187, 516 }, { 188, 516 }, { 189, 516 }, { 190, 516 }, { 191, 516 },
 { 192, 516 }, { 193, 516 }, { 194, 516 }, { 195, 516 }, { 196, 516 },

 { 197, 516 }, { 198, 516 }, { 199, 516 }, { 200, 516 }, { 201, 516 },
 { 202, 516 }, { 203, 516 }, { 204, 516 }, { 205, 516 }, { 206, 516 },
 { 207, 516 }, { 208, 516 }, { 209, 516 }, { 210, 516 }, { 211, 516 },
 { 212, 516 }, { 213, 516 }, { 214, 516 }, { 215, 516 }, { 216, 516 },
 { 217, 516 }, { 218, 516 }, { 219, 516 }, { 220, 516 }, { 221, 516 },
 { 222, 516 }, { 223, 516 }, { 224, 516 }, { 225, 516 }, { 226, 516 },
 { 227, 516 }, { 228, 516 }, { 229, 516 }, { 230, 516 }, { 231, 516 },
 { 232, 516 }, { 233, 516 }, { 234, 516 }, { 235, 516 }, { 236, 516 },
 { 237, 516 }, { 238, 516 }, { 239, 516 }, { 240, 516 }, { 241, 516 },
 { 242, 516 }, { 243, 516 }, { 244, 516 }, { 245, 516 }, { 246, 516 },

 { 247, 516 }, { 248, 516 }, { 249, 516 }, { 250, 516 }, { 251, 516 },
 { 252, 516 }, { 253, 516 }, { 254, 516 }, { 255, 516 }, { 256, 526 },
 {   0,   0 }, {   0,3351 }, {   1, 258 }, {   2, 258 }, {   3, 258 },
 {   4, 258 }, {   5, 258 }, {   6, 258 }, {   7, 258 }, {   8, 258 },
 {   9, 260 }, {  10, 262 }, {  11, 258 }, {  12, 262 }, {  13, 264 },
 {  14, 258 }, {  15, 258 }, {  16, 258 }, {  17, 258 }, {  18, 258 },
 {  19, 258 }, {  20, 258 }, {  21, 258 }, {  22, 258 }, {  23, 258 },
 {  24, 258 }, {  25, 258 }, {  26, 258 }, {  27, 258 }, {  28, 258 },
 {  29, 258 }, {  30, 258 }, {  31, 258 }, {  32, 266 }, {  33, 280 },
 {  34, 280 }, {  35, 258 }, {  36, 280 }, {  37, 280 }, {  38, 258 },

 {  39, 258 }, {  40, 280 }, {  41, 266 }, {  42, 280 }, {  43, 280 },
 {  44, 260 }, {  45, 266 }, {  46, 266 }, {  47, 258 }, {  48, 359 },
 {  49, 451 }, {  50, 543 }, {  51, 635 }, {  52, 359 }, {  53, 359 },
 {  54, 359 }, {  55, 359 }, {  56, 359 }, {  57, 359 }, {  58, 258 },
 {  59, 260 }, {  60, 280 }, {  61, 280 }, {  62, 266 }, {  63, 280 },
 {  64, 280 }, {  65, 727 }, {  66, 727 }, {  67, 727 }, {  68, 727 },
 {  69, 727 }, {  70, 727 }, {  71, 727 }, {  72, 727 }, {  73, 727 },
 {  74, 727 }, {  75, 727 }, {  76, 727 }, {  77, 727 }, {  78, 727 },
 {  79, 727 }, {  80, 727 }, {  81, 727 }, {  82, 727 }, {  83, 727 },
 {  84, 727 }, {  85, 727 }, {  86, 727 }, {  87, 727 }, {  88, 727 },

 {  89, 727 }, {  90, 727 }, {  91, 258 }, {  92, 258 }, {  93, 258 },
 {  94, 280 }, {  95, 266 }, {  96, 258 }, {  97, 727 }, {  98, 727 },
 {  99, 727 }, { 100, 727 }, { 101, 727 }, { 102, 727 }, { 103, 727 },
 { 104, 727 }, { 105, 727 }, { 106, 727 }, { 107, 727 }, { 108, 727 },
 { 109, 727 }, { 110, 727 }, { 111, 727 }, { 112, 727 }, { 113, 727 },
 { 114, 727 }, { 115, 727 }, { 116, 727 }, { 117, 727 }, { 118, 727 },
 { 119, 727 }, { 120, 727 }, { 121, 727 }, { 122, 727 }, { 123, 280 },
 { 124, 280 }, { 125, 266 }, { 126, 280 }, { 127, 258 }, { 128, 258 },
 { 129, 258 }, { 130, 258 }, { 131, 258 }, { 132, 258 }, { 133, 258 },
 { 134, 258 }, { 135, 258 }, { 136, 258 }, { 137, 258 }, { 138, 258 },

 { 139, 258 }, { 140, 258 }, { 141, 258 }, { 142, 258 }, { 143, 258 },
 { 144, 258 }, { 145, 258 }, { 146, 258 }, { 147, 258 }, { 148, 258 },
 { 149, 258 }, { 150, 258 }, { 151, 258 }, { 152, 258 }, { 153, 258 },
 { 154, 258 }, { 155, 258 }, { 156, 258 }, { 157, 258 }, { 158, 258 },
 { 159, 258 }, { 160, 258 }, { 161, 258 }, { 162, 258 }, { 163, 258 },
 { 164, 258 }, { 165, 258 }, { 166, 258 }, { 167, 258 }, { 168, 258 },
 { 169, 258 }, { 170, 258 }, { 171, 258 }, { 172, 258 }, { 173, 258 },
 { 174, 258 }, { 175, 258 }, { 176, 258 }, { 177, 258 }, { 178, 258 },
 { 179, 258 }, { 180, 258 }, { 181, 258 }, { 182, 258 }, { 183, 258 },
 { 184, 258 }, { 185, 258 }, { 186, 258 }, { 187, 258 }, { 188, 258 },

 { 189, 258 }, { 190, 258 }, { 191, 258 }, { 192, 258 }, { 193, 258 },
 { 194, 258 }, { 195, 258 }, { 196, 258 }, { 197, 258 }, { 198, 258 },
 { 199, 258 }, { 200, 258 }, { 201, 258 }, { 202, 258 }, { 203, 258 },
 { 204, 258 }, { 205, 258 }, { 206, 258 }, { 207, 258 }, { 208, 258 },
 { 209, 258 }, { 210, 258 }, { 211, 258 }, { 212, 258 }, { 213, 258 },
 { 214, 258 }, { 215, 258 }, { 216, 258 }, { 217, 258 }, { 218, 258 },
 { 219, 258 }, { 220, 258 }, { 221, 258 }, { 222, 258 }, { 223, 258 },
 { 224, 258 }, { 225, 258 }, { 226, 258 }, { 227, 258 }, { 228, 258 },
 { 229, 258 }, { 230, 258 }, { 231, 258 }, { 232, 258 }, { 233, 258 },
 { 234, 258 }, { 235, 258 }, { 236, 258 }, { 237, 258 }, { 238, 258 },

 { 239, 258 }, { 240, 258 }, { 241, 258 }, { 242, 258 }, { 243, 258 },
 { 244, 258 }, { 245, 258 }, { 246, 258 }, { 247, 258 }, { 248, 258 },
 { 249, 258 }, { 250, 258 }, { 251, 258 }, { 252, 258 }, { 253, 258 },
 { 254, 258 }, { 255, 258 }, { 256, 268 }, {   0,  17 }, {   0,3093 },
 {   0,   4 }, {   0,3091 }, {   0,   2 }, {   0,3089 }, {   0,   2 },
 {   0,3087 }, {   0,   5 }, {   0,3085 }, {   0,   3 }, {   0,3083 },
 {   9,  17 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  10,  18 }, {   0,   0 }, {   0,   4 }, {   0,3074 }, {   0,   0 },
 {   0,   1 }, {   0,3071 }, {   0,   2 }, {   0,3069 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   9,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,3056 }, {   0,   0 }, {   0,   0 }, {  32, 553 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  44,  17 }, {   0,   0 }, {   0,   0 }, {  41, 553 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  45, 553 }, {  46, 553 }, {  33, 575 },
 {  34, 575 }, {   0,   0 }, {  36, 575 }, {  37, 575 }, {   0,   0 },
 {  59,  17 }, {  40, 575 }, {  44,   0 }, {  42, 575 }, {  43, 575 },
 {   0,  13 }, {   0,3026 }, {   0,   0 }, {   0,   0 }, {  62, 553 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  59,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {  60, 575 }, {  61, 575 }, {   0,   0 }, {  63, 575 },
 {  64, 575 }, {  50,  30 }, {  51,  30 }, {  52,  30 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  56,  30 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,  14 },
 {   0,2992 }, {   0,   0 }, {  95, 553 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  94, 575 }, {  50,   0 }, {  51,   0 }, {  52,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  56,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, { 125, 553 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, { 123, 575 },
 { 124, 575 }, {   0,   0 }, { 126, 575 }, {  48, 526 }, {  49, 618 },
 {  50, 710 }, {  51, 802 }, {  52, 526 }, {  53, 526 }, {  54, 526 },
 {  55, 526 }, {  56, 526 }, {  57, 526 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  65, 894 }, {  66, 894 }, {  67, 894 }, {  68, 894 }, {  69, 894 },
 {  70, 894 }, {  71, 894 }, {  72, 894 }, {  73, 894 }, {  74, 894 },
 {  75, 894 }, {  76, 894 }, {  77, 894 }, {  78, 894 }, {  79, 894 },

 {  80, 894 }, {  81, 894 }, {  82, 894 }, {  83, 894 }, {  84, 986 },
 {  85, 894 }, {  86, 894 }, {  87, 894 }, {  88, 894 }, {  89, 894 },
 {  90, 894 }, {   0,  14 }, {   0,2900 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  97, 894 }, {  98, 894 }, {  99, 894 },
 { 100, 894 }, { 101, 894 }, { 102, 894 }, { 103, 894 }, { 104, 894 },
 { 105, 894 }, { 106, 894 }, { 107, 894 }, { 108, 894 }, { 109, 894 },
 { 110, 894 }, { 111, 894 }, { 112, 894 }, { 113, 894 }, { 114, 894 },
 { 115, 894 }, { 116, 986 }, { 117, 894 }, { 118, 894 }, { 119, 894 },
 { 120, 894 }, { 121, 894 }, { 122, 894 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  47,-156 },
 {  48, 434 }, {  49, 986 }, {  50,1078 }, {  51,1170 }, {  52, 434 },
 {  53, 434 }, {  54, 434 }, {  55, 434 }, {  56, 434 }, {  57, 434 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  65, 802 }, {  66, 802 }, {  67, 802 },
 {  68, 802 }, {  69, 802 }, {  70, 802 }, {  71, 802 }, {  72, 802 },
 {  73, 802 }, {  74, 802 }, {  75, 802 }, {  76, 802 }, {  77, 802 },
 {  78, 802 }, {  79, 802 }, {  80, 802 }, {  81, 802 }, {  82, 802 },
 {  83,1262 }, {  84, 802 }, {  85, 802 }, {  86, 802 }, {  87, 802 },

 {  88, 802 }, {  89, 802 }, {  90, 802 }, {   0,  14 }, {   0,2808 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  97, 802 },
 {  98, 802 }, {  99, 802 }, { 100, 802 }, { 101, 802 }, { 102, 802 },
 { 103, 802 }, { 104, 802 }, { 105, 802 }, { 106, 802 }, { 107, 802 },
 { 108, 802 }, { 109, 802 }, { 110, 802 }, { 111, 802 }, { 112, 802 },
 { 113, 802 }, { 114, 802 }, { 115,1262 }, { 116, 802 }, { 117, 802 },
 { 118, 802 }, { 119, 802 }, { 120, 802 }, { 121, 802 }, { 122, 802 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {  48, 342 }, {  49, 434 }, {  50, 526 },
 {  51, 618 }, {  52, 342 }, {  53, 342 }, {  54, 342 }, {  55, 342 },
 {  56, 342 }, {  57, 342 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65, 710 },
 {  66, 710 }, {  67, 710 }, {  68, 710 }, {  69, 710 }, {  70, 710 },
 {  71, 710 }, {  72, 710 }, {  73, 710 }, {  74, 710 }, {  75, 710 },
 {  76, 710 }, {  77, 710 }, {  78,1262 }, {  79, 710 }, {  80, 710 },
 {  81, 710 }, {  82, 710 }, {  83, 710 }, {  84, 710 }, {  85, 710 },
 {  86, 710 }, {  87, 710 }, {  88, 710 }, {  89, 710 }, {  90, 710 },
 {   0,  14 }, {   0,2716 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {  97, 710 }, {  98, 710 }, {  99, 710 }, { 100, 710 },
 { 101, 710 }, { 102, 710 }, { 103, 710 }, { 104, 710 }, { 105, 710 },
 { 106, 710 }, { 107, 710 }, { 108, 710 }, { 109, 710 }, { 110,1262 },
 { 111, 710 }, { 112, 710 }, { 113, 710 }, { 114, 710 }, { 115, 710 },
 { 116, 710 }, { 117, 710 }, { 118, 710 }, { 119, 710 }, { 120, 710 },
 { 121, 710 }, { 122, 710 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  47,-340 }, {  48, 250 },
 {  49, 342 }, {  50, 434 }, {  51, 526 }, {  52, 250 }, {  53, 250 },

 {  54, 250 }, {  55, 250 }, {  56, 250 }, {  57, 250 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  65, 618 }, {  66, 618 }, {  67, 618 }, {  68, 618 },
 {  69, 618 }, {  70, 618 }, {  71, 618 }, {  72, 618 }, {  73, 618 },
 {  74, 618 }, {  75, 618 }, {  76, 618 }, {  77, 618 }, {  78, 618 },
 {  79, 618 }, {  80, 618 }, {  81, 618 }, {  82,1262 }, {  83, 618 },
 {  84, 618 }, {  85, 618 }, {  86, 618 }, {  87, 618 }, {  88, 618 },
 {  89, 618 }, {  90, 618 }, {   0,  15 }, {   0,2624 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  97, 618 }, {  98, 618 },
 {  99, 618 }, { 100, 618 }, { 101, 618 }, { 102, 618 }, { 103, 618 },

 { 104, 618 }, { 105, 618 }, { 106, 618 }, { 107, 618 }, { 108, 618 },
 { 109, 618 }, { 110, 618 }, { 111, 618 }, { 112, 618 }, { 113, 618 },
 { 114,1262 }, { 115, 618 }, { 116, 618 }, { 117, 618 }, { 118, 618 },
 { 119, 618 }, { 120, 618 }, { 121, 618 }, { 122, 618 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  48,1262 }, {  49,1262 }, {  50,1262 }, {  51,1262 },
 {  52,1262 }, {  53,1262 }, {  54,1262 }, {  55,1262 }, {  56,1262 },
 {  57,1262 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65,1354 }, {  66,1354 },
 {  67,1354 }, {  68,1354 }, {  69,1354 }, {  70,1354 }, {  71,1354 },
 {  72,1354 }, {  73,1354 }, {  74,1354 }, {  75,1354 }, {  76,1354 },
 {  77,1354 }, {  78,1354 }, {  79,1354 }, {  80,1354 }, {  81,1354 },
 {  82,1354 }, {  83,1354 }, {  84,1354 }, {  85,1354 }, {  86,1354 },
 {  87,1354 }, {  88,1354 }, {  89,1354 }, {  90,1354 }, {   0,   5 },
 {   0,2532 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  97,1354 }, {  98,1354 }, {  99,1354 }, { 100,1354 }, { 101,1354 },
 { 102,1354 }, { 103,1354 }, { 104,1354 }, { 105,1354 }, { 106,1354 },
 { 107,1354 }, { 108,1354 }, { 109,1354 }, { 110,1354 }, { 111,1354 },

 { 112,1354 }, { 113,1354 }, { 114,1354 }, { 115,1354 }, { 116,1354 },
 { 117,1354 }, { 118,1354 }, { 119,1354 }, { 120,1354 }, { 121,1354 },
 { 122,1354 }, {   0,   0 }, {  32,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   1 }, {   0,2496 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  41,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  45,   0 }, {  46,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  62,   0 }, {   0,   0 }, {   0,   0 },
 {   0,  14 }, {   0,2466 }, {   0,   0 }, {   0,   0 }, {  33,   0 },

 {  34,   0 }, {   0,   0 }, {  36,   0 }, {  37,   0 }, {   0,   0 },
 {   0,   0 }, {  40,   0 }, {   0,   0 }, {  42,   0 }, {  43,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  95,   0 }, {  60,   0 }, {  61,   0 }, {   0,   0 }, {  63,   0 },
 {  64,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48,   0 },
 {  49,  92 }, {  50, 184 }, {  51, 276 }, {  52,   0 }, {  53,   0 },

 {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 }, {   0,   0 },
 { 125,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  94,   0 }, {  65, 368 }, {  66, 368 }, {  67, 368 }, {  68, 368 },
 {  69, 368 }, {  70, 368 }, {  71, 368 }, {  72, 368 }, {  73, 368 },
 {  74, 368 }, {  75, 368 }, {  76, 368 }, {  77, 368 }, {  78, 368 },
 {  79, 368 }, {  80, 368 }, {  81, 368 }, {  82, 368 }, {  83, 368 },
 {  84, 460 }, {  85, 368 }, {  86, 368 }, {  87, 368 }, {  88, 368 },
 {  89, 368 }, {  90, 368 }, {   0,  14 }, {   0,2374 }, { 123,   0 },
 { 124,   0 }, {   0,   0 }, { 126,   0 }, {  97, 368 }, {  98, 368 },
 {  99, 368 }, { 100, 368 }, { 101, 368 }, { 102, 368 }, { 103, 368 },

 { 104, 368 }, { 105, 368 }, { 106, 368 }, { 107, 368 }, { 108, 368 },
 { 109, 368 }, { 110, 368 }, { 111, 368 }, { 112, 368 }, { 113, 368 },
 { 114, 368 }, { 115, 368 }, { 116, 460 }, { 117, 368 }, { 118, 368 },
 { 119, 368 }, { 120, 368 }, { 121, 368 }, { 122, 368 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  48, -92 }, {  49, 460 }, {  50, 552 }, {  51, 644 },
 {  52, -92 }, {  53, -92 }, {  54, -92 }, {  55, -92 }, {  56, -92 },
 {  57, -92 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65, 276 }, {  66, 276 },
 {  67, 276 }, {  68, 276 }, {  69, 276 }, {  70, 276 }, {  71, 276 },
 {  72, 276 }, {  73, 276 }, {  74, 276 }, {  75, 276 }, {  76, 276 },
 {  77, 276 }, {  78, 276 }, {  79, 276 }, {  80, 276 }, {  81, 276 },
 {  82, 276 }, {  83, 736 }, {  84, 276 }, {  85, 276 }, {  86, 276 },
 {  87, 276 }, {  88, 276 }, {  89, 276 }, {  90, 276 }, {   0,  14 },
 {   0,2282 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  97, 276 }, {  98, 276 }, {  99, 276 }, { 100, 276 }, { 101, 276 },
 { 102, 276 }, { 103, 276 }, { 104, 276 }, { 105, 276 }, { 106, 276 },
 { 107, 276 }, { 108, 276 }, { 109, 276 }, { 110, 276 }, { 111, 276 },

 { 112, 276 }, { 113, 276 }, { 114, 276 }, { 115, 736 }, { 116, 276 },
 { 117, 276 }, { 118, 276 }, { 119, 276 }, { 120, 276 }, { 121, 276 },
 { 122, 276 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48,-184 }, {  49, -92 },
 {  50,   0 }, {  51,  92 }, {  52,-184 }, {  53,-184 }, {  54,-184 },
 {  55,-184 }, {  56,-184 }, {  57,-184 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  65, 184 }, {  66, 184 }, {  67, 184 }, {  68, 184 }, {  69, 184 },

 {  70, 184 }, {  71, 184 }, {  72, 184 }, {  73, 184 }, {  74, 184 },
 {  75, 184 }, {  76, 184 }, {  77, 184 }, {  78, 736 }, {  79, 184 },
 {  80, 184 }, {  81, 184 }, {  82, 184 }, {  83, 184 }, {  84, 184 },
 {  85, 184 }, {  86, 184 }, {  87, 184 }, {  88, 184 }, {  89, 184 },
 {  90, 184 }, {   0,  14 }, {   0,2190 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  97, 184 }, {  98, 184 }, {  99, 184 },
 { 100, 184 }, { 101, 184 }, { 102, 184 }, { 103, 184 }, { 104, 184 },
 { 105, 184 }, { 106, 184 }, { 107, 184 }, { 108, 184 }, { 109, 184 },
 { 110, 736 }, { 111, 184 }, { 112, 184 }, { 113, 184 }, { 114, 184 },
 { 115, 184 }, { 116, 184 }, { 117, 184 }, { 118, 184 }, { 119, 184 },

 { 120, 184 }, { 121, 184 }, { 122, 184 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  48,-276 }, {  49,-184 }, {  50, -92 }, {  51,   0 }, {  52,-276 },
 {  53,-276 }, {  54,-276 }, {  55,-276 }, {  56,-276 }, {  57,-276 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  65,  92 }, {  66,  92 }, {  67,  92 },
 {  68,  92 }, {  69,  92 }, {  70,  92 }, {  71,  92 }, {  72,  92 },
 {  73,  92 }, {  74,  92 }, {  75,  92 }, {  76,  92 }, {  77,  92 },

 {  78,  92 }, {  79,  92 }, {  80,  92 }, {  81,  92 }, {  82, 736 },
 {  83,  92 }, {  84,  92 }, {  85,  92 }, {  86,  92 }, {  87,  92 },
 {  88,  92 }, {  89,  92 }, {  90,  92 }, {   0,  16 }, {   0,2098 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  97,  92 },
 {  98,  92 }, {  99,  92 }, { 100,  92 }, { 101,  92 }, { 102,  92 },
 { 103,  92 }, { 104,  92 }, { 105,  92 }, { 106,  92 }, { 107,  92 },
 { 108,  92 }, { 109,  92 }, { 110,  92 }, { 111,  92 }, { 112,  92 },
 { 113,  92 }, { 114, 736 }, { 115,  92 }, { 116,  92 }, { 117,  92 },
 { 118,  92 }, { 119,  92 }, { 120,  92 }, { 121,  92 }, { 122,  92 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  48, 736 }, {  49, 736 }, {  50, 736 },
 {  51, 736 }, {  52, 736 }, {  53, 736 }, {  54, 736 }, {  55, 736 },
 {  56, 736 }, {  57, 736 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65, 920 },
 {  66, 920 }, {  67, 920 }, {  68, 920 }, {  69, 920 }, {  70, 920 },
 {  71, 920 }, {  72, 920 }, {  73, 920 }, {  74, 920 }, {  75, 920 },
 {  76, 920 }, {  77, 920 }, {  78, 920 }, {  79, 920 }, {  80, 920 },
 {  81, 920 }, {  82, 920 }, {  83, 920 }, {  84, 920 }, {  85, 920 },

 {  86, 920 }, {  87, 920 }, {  88, 920 }, {  89, 920 }, {  90, 920 },
 {   0,  16 }, {   0,2006 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  97, 920 }, {  98, 920 }, {  99, 920 }, { 100, 920 },
 { 101, 920 }, { 102, 920 }, { 103, 920 }, { 104, 920 }, { 105, 920 },
 { 106, 920 }, { 107, 920 }, { 108, 920 }, { 109, 920 }, { 110, 920 },
 { 111, 920 }, { 112, 920 }, { 113, 920 }, { 114, 920 }, { 115, 920 },
 { 116, 920 }, { 117, 920 }, { 118, 920 }, { 119, 920 }, { 120, 920 },
 { 121, 920 }, { 122, 920 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48, 644 },
 {  49, 644 }, {  50, 644 }, {  51, 644 }, {  52, 644 }, {  53, 644 },
 {  54, 644 }, {  55, 644 }, {  56, 644 }, {  57, 644 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  65, 828 }, {  66, 828 }, {  67, 828 }, {  68, 828 },
 {  69, 828 }, {  70, 828 }, {  71, 828 }, {  72, 920 }, {  73, 828 },
 {  74, 828 }, {  75, 828 }, {  76, 828 }, {  77, 828 }, {  78, 828 },
 {  79, 828 }, {  80, 828 }, {  81, 828 }, {  82, 828 }, {  83, 828 },
 {  84, 828 }, {  85, 828 }, {  86, 828 }, {  87, 828 }, {  88, 828 },
 {  89, 828 }, {  90, 828 }, {   0,  14 }, {   0,1914 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  97, 828 }, {  98, 828 },
 {  99, 828 }, { 100, 828 }, { 101, 828 }, { 102, 828 }, { 103, 828 },
 { 104, 920 }, { 105, 828 }, { 106, 828 }, { 107, 828 }, { 108, 828 },
 { 109, 828 }, { 110, 828 }, { 111, 828 }, { 112, 828 }, { 113, 828 },
 { 114, 828 }, { 115, 828 }, { 116, 828 }, { 117, 828 }, { 118, 828 },
 { 119, 828 }, { 120, 828 }, { 121, 828 }, { 122, 828 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  48,-552 }, {  49,   0 }, {  50,  92 }, {  51, 184 },

 {  52,-552 }, {  53,-552 }, {  54,-552 }, {  55,-552 }, {  56,-552 },
 {  57,-552 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65,-184 }, {  66,-184 },
 {  67,-184 }, {  68,-184 }, {  69,-184 }, {  70,-184 }, {  71,-184 },
 {  72,-184 }, {  73,-184 }, {  74,-184 }, {  75,-184 }, {  76,-184 },
 {  77,-184 }, {  78,-184 }, {  79,-184 }, {  80,-184 }, {  81,-184 },
 {  82,-184 }, {  83, 276 }, {  84, 920 }, {  85,-184 }, {  86,-184 },
 {  87,-184 }, {  88,-184 }, {  89,-184 }, {  90,-184 }, {   0,  14 },
 {   0,1822 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  97,-184 }, {  98,-184 }, {  99,-184 }, { 100,-184 }, { 101,-184 },

 { 102,-184 }, { 103,-184 }, { 104,-184 }, { 105,-184 }, { 106,-184 },
 { 107,-184 }, { 108,-184 }, { 109,-184 }, { 110,-184 }, { 111,-184 },
 { 112,-184 }, { 113,-184 }, { 114,-184 }, { 115, 276 }, { 116, 920 },
 { 117,-184 }, { 118,-184 }, { 119,-184 }, { 120,-184 }, { 121,-184 },
 { 122,-184 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48,-644 }, {  49,-552 },
 {  50,-460 }, {  51,-368 }, {  52,-644 }, {  53,-644 }, {  54,-644 },
 {  55,-644 }, {  56,-644 }, {  57,-644 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  65,-276 }, {  66,-276 }, {  67,-276 }, {  68,-276 }, {  69,-276 },
 {  70,-276 }, {  71,-276 }, {  72,-276 }, {  73,-276 }, {  74,-276 },
 {  75,-276 }, {  76,-276 }, {  77,-276 }, {  78, 276 }, {  79,-276 },
 {  80,-276 }, {  81,-276 }, {  82,-276 }, {  83,-276 }, {  84, 920 },
 {  85,-276 }, {  86,-276 }, {  87,-276 }, {  88,-276 }, {  89,-276 },
 {  90,-276 }, {   0,  14 }, {   0,1730 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  97,-276 }, {  98,-276 }, {  99,-276 },
 { 100,-276 }, { 101,-276 }, { 102,-276 }, { 103,-276 }, { 104,-276 },
 { 105,-276 }, { 106,-276 }, { 107,-276 }, { 108,-276 }, { 109,-276 },

 { 110, 276 }, { 111,-276 }, { 112,-276 }, { 113,-276 }, { 114,-276 },
 { 115,-276 }, { 116, 920 }, { 117,-276 }, { 118,-276 }, { 119,-276 },
 { 120,-276 }, { 121,-276 }, { 122,-276 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  48,-736 }, {  49,-644 }, {  50,-552 }, {  51,-460 }, {  52,-736 },
 {  53,-736 }, {  54,-736 }, {  55,-736 }, {  56,-736 }, {  57,-736 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  65,-368 }, {  66,-368 }, {  67,-368 },

 {  68,-368 }, {  69,-368 }, {  70,-368 }, {  71,-368 }, {  72,-368 },
 {  73,-368 }, {  74,-368 }, {  75,-368 }, {  76,-368 }, {  77,-368 },
 {  78,-368 }, {  79,-368 }, {  80,-368 }, {  81,-368 }, {  82, 276 },
 {  83,-368 }, {  84, 920 }, {  85,-368 }, {  86,-368 }, {  87,-368 },
 {  88,-368 }, {  89,-368 }, {  90,-368 }, {   0,  16 }, {   0,1638 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  97,-368 },
 {  98,-368 }, {  99,-368 }, { 100,-368 }, { 101,-368 }, { 102,-368 },
 { 103,-368 }, { 104,-368 }, { 105,-368 }, { 106,-368 }, { 107,-368 },
 { 108,-368 }, { 109,-368 }, { 110,-368 }, { 111,-368 }, { 112,-368 },
 { 113,-368 }, { 114, 276 }, { 115,-368 }, { 116, 920 }, { 117,-368 },

 { 118,-368 }, { 119,-368 }, { 120,-368 }, { 121,-368 }, { 122,-368 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  48, 276 }, {  49, 276 }, {  50, 276 },
 {  51, 276 }, {  52, 276 }, {  53, 276 }, {  54, 276 }, {  55, 276 },
 {  56, 276 }, {  57, 276 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65, 460 },
 {  66, 460 }, {  67, 460 }, {  68, 460 }, {  69, 460 }, {  70, 460 },
 {  71, 460 }, {  72, 460 }, {  73, 460 }, {  74, 460 }, {  75, 460 },

 {  76, 460 }, {  77, 460 }, {  78, 460 }, {  79, 460 }, {  80, 460 },
 {  81, 460 }, {  82, 460 }, {  83, 460 }, {  84, 920 }, {  85, 460 },
 {  86, 460 }, {  87, 460 }, {  88, 460 }, {  89, 460 }, {  90, 460 },
 {   0,  16 }, {   0,1546 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  97, 460 }, {  98, 460 }, {  99, 460 }, { 100, 460 },
 { 101, 460 }, { 102, 460 }, { 103, 460 }, { 104, 460 }, { 105, 460 },
 { 106, 460 }, { 107, 460 }, { 108, 460 }, { 109, 460 }, { 110, 460 },
 { 111, 460 }, { 112, 460 }, { 113, 460 }, { 114, 460 }, { 115, 460 },
 { 116, 920 }, { 117, 460 }, { 118, 460 }, { 119, 460 }, { 120, 460 },
 { 121, 460 }, { 122, 460 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48, 184 },
 {  49, 184 }, {  50, 184 }, {  51, 184 }, {  52, 184 }, {  53, 184 },
 {  54, 184 }, {  55, 184 }, {  56, 184 }, {  57, 184 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  65, 368 }, {  66, 368 }, {  67, 368 }, {  68, 920 },
 {  69, 368 }, {  70, 368 }, {  71, 368 }, {  72, 368 }, {  73, 368 },
 {  74, 368 }, {  75, 368 }, {  76, 368 }, {  77, 368 }, {  78, 368 },
 {  79, 368 }, {  80, 368 }, {  81, 368 }, {  82, 368 }, {  83, 368 },

 {  84, 368 }, {  85, 368 }, {  86, 368 }, {  87, 368 }, {  88, 368 },
 {  89, 368 }, {  90, 368 }, {   0,  16 }, {   0,1454 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  97, 368 }, {  98, 368 },
 {  99, 368 }, { 100, 920 }, { 101, 368 }, { 102, 368 }, { 103, 368 },
 { 104, 368 }, { 105, 368 }, { 106, 368 }, { 107, 368 }, { 108, 368 },
 { 109, 368 }, { 110, 368 }, { 111, 368 }, { 112, 368 }, { 113, 368 },
 { 114, 368 }, { 115, 368 }, { 116, 368 }, { 117, 368 }, { 118, 368 },
 { 119, 368 }, { 120, 368 }, { 121, 368 }, { 122, 368 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  48,  92 }, {  49,  92 }, {  50,  92 }, {  51,  92 },
 {  52,  92 }, {  53,  92 }, {  54,  92 }, {  55,  92 }, {  56,  92 },
 {  57,  92 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65, 276 }, {  66, 276 },
 {  67, 276 }, {  68, 920 }, {  69, 276 }, {  70, 276 }, {  71, 276 },
 {  72, 276 }, {  73, 276 }, {  74, 276 }, {  75, 276 }, {  76, 276 },
 {  77, 276 }, {  78, 276 }, {  79, 276 }, {  80, 276 }, {  81, 276 },
 {  82, 276 }, {  83, 276 }, {  84, 276 }, {  85, 276 }, {  86, 276 },
 {  87, 276 }, {  88, 276 }, {  89, 276 }, {  90, 276 }, {   0,  16 },

 {   0,1362 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  97, 276 }, {  98, 276 }, {  99, 276 }, { 100, 920 }, { 101, 276 },
 { 102, 276 }, { 103, 276 }, { 104, 276 }, { 105, 276 }, { 106, 276 },
 { 107, 276 }, { 108, 276 }, { 109, 276 }, { 110, 276 }, { 111, 276 },
 { 112, 276 }, { 113, 276 }, { 114, 276 }, { 115, 276 }, { 116, 276 },
 { 117, 276 }, { 118, 276 }, { 119, 276 }, { 120, 276 }, { 121, 276 },
 { 122, 276 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48,   0 }, {  49,   0 },

 {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 },
 {  55,   0 }, {  56,   0 }, {  57,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  65, 184 }, {  66, 184 }, {  67, 184 }, {  68, 184 }, {  69, 184 },
 {  70, 184 }, {  71, 184 }, {  72, 184 }, {  73, 184 }, {  74, 184 },
 {  75, 184 }, {  76, 184 }, {  77, 184 }, {  78, 184 }, {  79, 184 },
 {  80, 184 }, {  81, 184 }, {  82, 184 }, {  83, 184 }, {  84, 184 },
 {  85, 184 }, {  86, 184 }, {  87, 184 }, {  88, 184 }, {  89, 184 },
 {  90, 184 }, {   0,  15 }, {   0,1270 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  97, 184 }, {  98, 184 }, {  99, 184 },

 { 100, 184 }, { 101, 184 }, { 102, 184 }, { 103, 184 }, { 104, 184 },
 { 105, 184 }, { 106, 184 }, { 107, 184 }, { 108, 184 }, { 109, 184 },
 { 110, 184 }, { 111, 184 }, { 112, 184 }, { 113, 184 }, { 114, 184 },
 { 115, 184 }, { 116, 184 }, { 117, 184 }, { 118, 184 }, { 119, 184 },
 { 120, 184 }, { 121, 184 }, { 122, 184 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  48, -92 }, {  49, -92 }, {  50, -92 }, {  51, -92 }, {  52, -92 },
 {  53, -92 }, {  54, -92 }, {  55, -92 }, {  56, -92 }, {  57, -92 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  65,   0 }, {  66,   0 }, {  67,   0 },
 {  68,   0 }, {  69,   0 }, {  70,   0 }, {  71,   0 }, {  72,   0 },
 {  73,   0 }, {  74,   0 }, {  75,   0 }, {  76,   0 }, {  77,   0 },
 {  78,   0 }, {  79,   0 }, {  80,   0 }, {  81,   0 }, {  82,   0 },
 {  83,   0 }, {  84,   0 }, {  85,   0 }, {  86,   0 }, {  87,   0 },
 {  88,   0 }, {  89,   0 }, {  90,   0 }, {   0,  16 }, {   0,1178 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  97,   0 },
 {  98,   0 }, {  99,   0 }, { 100,   0 }, { 101,   0 }, { 102,   0 },
 { 103,   0 }, { 104,   0 }, { 105,   0 }, { 106,   0 }, { 107,   0 },

 { 108,   0 }, { 109,   0 }, { 110,   0 }, { 111,   0 }, { 112,   0 },
 { 113,   0 }, { 114,   0 }, { 115,   0 }, { 116,   0 }, { 117,   0 },
 { 118,   0 }, { 119,   0 }, { 120,   0 }, { 121,   0 }, { 122,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  48,-184 }, {  49,-184 }, {  50,-184 },
 {  51,-184 }, {  52,-184 }, {  53,-184 }, {  54,-184 }, {  55,-184 },
 {  56,-184 }, {  57,-184 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65,   0 },

 {  66,   0 }, {  67,   0 }, {  68,   0 }, {  69,   0 }, {  70,   0 },
 {  71,   0 }, {  72,   0 }, {  73,   0 }, {  74,   0 }, {  75,   0 },
 {  76,   0 }, {  77,   0 }, {  78,   0 }, {  79,   0 }, {  80,   0 },
 {  81,   0 }, {  82,   0 }, {  83,   0 }, {  84,   0 }, {  85,   0 },
 {  86,   0 }, {  87,   0 }, {  88,   0 }, {  89,   0 }, {  90,   0 },
 {   0,  12 }, {   0,1086 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  97,   0 }, {  98,   0 }, {  99,   0 }, { 100,   0 },
 { 101,   0 }, { 102,   0 }, { 103,   0 }, { 104,   0 }, { 105,   0 },
 { 106,   0 }, { 107,   0 }, { 108,   0 }, { 109,   0 }, { 110,   0 },
 { 111,   0 }, { 112,   0 }, { 113,   0 }, { 114,   0 }, { 115,   0 },

 { 116,   0 }, { 117,   0 }, { 118,   0 }, { 119,   0 }, { 120,   0 },
 { 121,   0 }, { 122,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48,-276 },
 {  49,-276 }, {  50,-276 }, {  51,-276 }, {  52,-276 }, {  53,-276 },
 {  54,-276 }, {  55,-276 }, {  56,-276 }, {  57,-276 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  65, -92 }, {  66, -92 }, {  67, -92 }, {  68, -92 },
 {  69, -92 }, {  70, -92 }, {  71, -92 }, {  72, -92 }, {  73, -92 },

 {  74, -92 }, {  75, -92 }, {  76, -92 }, {  77, -92 }, {  78, -92 },
 {  79, -92 }, {  80, -92 }, {  81, -92 }, {  82, -92 }, {  83, -92 },
 {  84, -92 }, {  85, -92 }, {  86, -92 }, {  87, -92 }, {  88, -92 },
 {  89, -92 }, {  90, -92 }, {   0,  16 }, {   0, 994 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  97, -92 }, {  98, -92 },
 {  99, -92 }, { 100, -92 }, { 101, -92 }, { 102, -92 }, { 103, -92 },
 { 104, -92 }, { 105, -92 }, { 106, -92 }, { 107, -92 }, { 108, -92 },
 { 109, -92 }, { 110, -92 }, { 111, -92 }, { 112, -92 }, { 113, -92 },
 { 114, -92 }, { 115, -92 }, { 116, -92 }, { 117, -92 }, { 118, -92 },
 { 119, -92 }, { 120, -92 }, { 121, -92 }, { 122, -92 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  48,-368 }, {  49,-368 }, {  50,-368 }, {  51,-368 },
 {  52,-368 }, {  53,-368 }, {  54,-368 }, {  55,-368 }, {  56,-368 },
 {  57,-368 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65,-184 }, {  66,-184 },
 {  67,-184 }, {  68,-184 }, {  69,-184 }, {  70,-184 }, {  71,-184 },
 {  72, 552 }, {  73,-184 }, {  74,-184 }, {  75,-184 }, {  76,-184 },
 {  77,-184 }, {  78,-184 }, {  79,-184 }, {  80,-184 }, {  81,-184 },

 {  82,-184 }, {  83,-184 }, {  84,-184 }, {  85,-184 }, {  86,-184 },
 {  87,-184 }, {  88,-184 }, {  89,-184 }, {  90,-184 }, {   0,  16 },
 {   0, 902 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  97,-184 }, {  98,-184 }, {  99,-184 }, { 100,-184 }, { 101,-184 },
 { 102,-184 }, { 103,-184 }, { 104, 552 }, { 105,-184 }, { 106,-184 },
 { 107,-184 }, { 108,-184 }, { 109,-184 }, { 110,-184 }, { 111,-184 },
 { 112,-184 }, { 113,-184 }, { 114,-184 }, { 115,-184 }, { 116,-184 },
 { 117,-184 }, { 118,-184 }, { 119,-184 }, { 120,-184 }, { 121,-184 },
 { 122,-184 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48,-460 }, {  49,-460 },
 {  50,-460 }, {  51,-460 }, {  52,-460 }, {  53,-460 }, {  54,-460 },
 {  55,-460 }, {  56,-460 }, {  57,-460 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  65,-276 }, {  66,-276 }, {  67,-276 }, {  68,-276 }, {  69,-276 },
 {  70,-276 }, {  71,-276 }, {  72, 552 }, {  73,-276 }, {  74,-276 },
 {  75,-276 }, {  76,-276 }, {  77,-276 }, {  78,-276 }, {  79,-276 },
 {  80,-276 }, {  81,-276 }, {  82,-276 }, {  83,-276 }, {  84,-276 },
 {  85,-276 }, {  86,-276 }, {  87,-276 }, {  88,-276 }, {  89,-276 },

 {  90,-276 }, {   0,  16 }, {   0, 810 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  97,-276 }, {  98,-276 }, {  99,-276 },
 { 100,-276 }, { 101,-276 }, { 102,-276 }, { 103,-276 }, { 104, 552 },
 { 105,-276 }, { 106,-276 }, { 107,-276 }, { 108,-276 }, { 109,-276 },
 { 110,-276 }, { 111,-276 }, { 112,-276 }, { 113,-276 }, { 114,-276 },
 { 115,-276 }, { 116,-276 }, { 117,-276 }, { 118,-276 }, { 119,-276 },
 { 120,-276 }, { 121,-276 }, { 122,-276 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {  48,-552 }, {  49,-552 }, {  50,-552 }, {  51,-552 }, {  52,-552 },
 {  53,-552 }, {  54,-552 }, {  55,-552 }, {  56,-552 }, {  57,-552 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  65,-368 }, {  66,-368 }, {  67,-368 },
 {  68,-368 }, {  69,-368 }, {  70,-368 }, {  71,-368 }, {  72, 552 },
 {  73,-368 }, {  74,-368 }, {  75,-368 }, {  76,-368 }, {  77,-368 },
 {  78,-368 }, {  79,-368 }, {  80,-368 }, {  81,-368 }, {  82,-368 },
 {  83,-368 }, {  84,-368 }, {  85,-368 }, {  86,-368 }, {  87,-368 },
 {  88,-368 }, {  89,-368 }, {  90,-368 }, {   0,   9 }, {   0, 718 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  97,-368 },

 {  98,-368 }, {  99,-368 }, { 100,-368 }, { 101,-368 }, { 102,-368 },
 { 103,-368 }, { 104, 552 }, { 105,-368 }, { 106,-368 }, { 107,-368 },
 { 108,-368 }, { 109,-368 }, { 110,-368 }, { 111,-368 }, { 112,-368 },
 { 113,-368 }, { 114,-368 }, { 115,-368 }, { 116,-368 }, { 117,-368 },
 { 118,-368 }, { 119,-368 }, { 120,-368 }, { 121,-368 }, { 122,-368 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  48,-644 }, {  49,-644 }, {  50,-644 },
 {  51,-644 }, {  52,-644 }, {  53,-644 }, {  54,-644 }, {  55,-644 },

 {  56,-644 }, {  57,-644 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65,-460 },
 {  66,-460 }, {  67,-460 }, {  68,-460 }, {  69,-460 }, {  70,-460 },
 {  71,-460 }, {  72,-460 }, {  73,-460 }, {  74,-460 }, {  75,-460 },
 {  76,-460 }, {  77,-460 }, {  78,-460 }, {  79,-460 }, {  80,-460 },
 {  81,-460 }, {  82,-460 }, {  83,-460 }, {  84,-460 }, {  85,-460 },
 {  86,-460 }, {  87,-460 }, {  88,-460 }, {  89,-460 }, {  90,-460 },
 {   0,  10 }, {   0, 626 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  97,-460 }, {  98,-460 }, {  99,-460 }, { 100,-460 },
 { 101,-460 }, { 102,-460 }, { 103,-460 }, { 104,-460 }, { 105,-460 },

 { 106,-460 }, { 107,-460 }, { 108,-460 }, { 109,-460 }, { 110,-460 },
 { 111,-460 }, { 112,-460 }, { 113,-460 }, { 114,-460 }, { 115,-460 },
 { 116,-460 }, { 117,-460 }, { 118,-460 }, { 119,-460 }, { 120,-460 },
 { 121,-460 }, { 122,-460 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48,-736 },
 {  49,-736 }, {  50,-736 }, {  51,-736 }, {  52,-736 }, {  53,-736 },
 {  54,-736 }, {  55,-736 }, {  56,-736 }, {  57,-736 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {  65,-552 }, {  66,-552 }, {  67,-552 }, {  68,-552 },
 {  69,-552 }, {  70,-552 }, {  71,-552 }, {  72,-552 }, {  73,-552 },
 {  74,-552 }, {  75,-552 }, {  76,-552 }, {  77,-552 }, {  78,-552 },
 {  79,-552 }, {  80,-552 }, {  81,-552 }, {  82,-552 }, {  83,-552 },
 {  84,-552 }, {  85,-552 }, {  86,-552 }, {  87,-552 }, {  88,-552 },
 {  89,-552 }, {  90,-552 }, {   0,  11 }, {   0, 534 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  97,-552 }, {  98,-552 },
 {  99,-552 }, { 100,-552 }, { 101,-552 }, { 102,-552 }, { 103,-552 },
 { 104,-552 }, { 105,-552 }, { 106,-552 }, { 107,-552 }, { 108,-552 },
 { 109,-552 }, { 110,-552 }, { 111,-552 }, { 112,-552 }, { 113,-552 },

 { 114,-552 }, { 115,-552 }, { 116,-552 }, { 117,-552 }, { 118,-552 },
 { 119,-552 }, { 120,-552 }, { 121,-552 }, { 122,-552 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  48,-828 }, {  49,-828 }, {  50,-828 }, {  51,-828 },
 {  52,-828 }, {  53,-828 }, {  54,-828 }, {  55,-828 }, {  56,-828 },
 {  57,-828 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65,-644 }, {  66,-644 },
 {  67,-644 }, {  68,-644 }, {  69,-644 }, {  70,-644 }, {  71,-644 },

 {  72,-644 }, {  73,-644 }, {  74,-644 }, {  75,-644 }, {  76,-644 },
 {  77,-644 }, {  78,-644 }, {  79,-644 }, {  80,-644 }, {  81,-644 },
 {  82,-644 }, {  83,-644 }, {  84,-644 }, {  85,-644 }, {  86,-644 },
 {  87,-644 }, {  88,-644 }, {  89,-644 }, {  90,-644 }, {   0,   6 },
 {   0, 442 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  97,-644 }, {  98,-644 }, {  99,-644 }, { 100,-644 }, { 101,-644 },
 { 102,-644 }, { 103,-644 }, { 104,-644 }, { 105,-644 }, { 106,-644 },
 { 107,-644 }, { 108,-644 }, { 109,-644 }, { 110,-644 }, { 111,-644 },
 { 112,-644 }, { 113,-644 }, { 114,-644 }, { 115,-644 }, { 116,-644 },
 { 117,-644 }, { 118,-644 }, { 119,-644 }, { 120,-644 }, { 121,-644 },

 { 122,-644 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48,-920 }, {  49,-920 },
 {  50,-920 }, {  51,-920 }, {  52,-920 }, {  53,-920 }, {  54,-920 },
 {  55,-920 }, {  56,-920 }, {  57,-920 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  65,-736 }, {  66,-736 }, {  67,-736 }, {  68,-736 }, {  69,-736 },
 {  70,-736 }, {  71,-736 }, {  72,-736 }, {  73,-736 }, {  74,-736 },
 {  75,-736 }, {  76,-736 }, {  77,-736 }, {  78,-736 }, {  79,-736 },

 {  80,-736 }, {  81,-736 }, {  82,-736 }, {  83,-736 }, {  84,-736 },
 {  85,-736 }, {  86,-736 }, {  87,-736 }, {  88,-736 }, {  89,-736 },
 {  90,-736 }, {   0,   7 }, {   0, 350 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  97,-736 }, {  98,-736 }, {  99,-736 },
 { 100,-736 }, { 101,-736 }, { 102,-736 }, { 103,-736 }, { 104,-736 },
 { 105,-736 }, { 106,-736 }, { 107,-736 }, { 108,-736 }, { 109,-736 },
 { 110,-736 }, { 111,-736 }, { 112,-736 }, { 113,-736 }, { 114,-736 },
 { 115,-736 }, { 116,-736 }, { 117,-736 }, { 118,-736 }, { 119,-736 },
 { 120,-736 }, { 121,-736 }, { 122,-736 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  48,-1012 }, {  49,-1012 }, {  50,-1012 }, {  51,-1012 }, {  52,-1012 },
 {  53,-1012 }, {  54,-1012 }, {  55,-1012 }, {  56,-1012 }, {  57,-1012 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  65,-828 }, {  66,-828 }, {  67,-828 },
 {  68,-828 }, {  69,-828 }, {  70,-828 }, {  71,-828 }, {  72,-828 },
 {  73,-828 }, {  74,-828 }, {  75,-828 }, {  76,-828 }, {  77,-828 },
 {  78,-828 }, {  79,-828 }, {  80,-828 }, {  81,-828 }, {  82,-828 },
 {  83,-828 }, {  84,-828 }, {  85,-828 }, {  86,-828 }, {  87,-828 },

 {  88,-828 }, {  89,-828 }, {  90,-828 }, {   0,   8 }, {   0, 258 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  97,-828 },
 {  98,-828 }, {  99,-828 }, { 100,-828 }, { 101,-828 }, { 102,-828 },
 { 103,-828 }, { 104,-828 }, { 105,-828 }, { 106,-828 }, { 107,-828 },
 { 108,-828 }, { 109,-828 }, { 110,-828 }, { 111,-828 }, { 112,-828 },
 { 113,-828 }, { 114,-828 }, { 115,-828 }, { 116,-828 }, { 117,-828 },
 { 118,-828 }, { 119,-828 }, { 120,-828 }, { 121,-828 }, { 122,-828 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {  48,-1104 }, {  49,-1104 }, {  50,-1104 },
 {  51,-1104 }, {  52,-1104 }, {  53,-1104 }, {  54,-1104 }, {  55,-1104 },
 {  56,-1104 }, {  57,-1104 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65,-920 },
 {  66,-920 }, {  67,-920 }, {  68,-920 }, {  69,-920 }, {  70,-920 },
 {  71,-920 }, {  72,-920 }, {  73,-920 }, {  74,-920 }, {  75,-920 },
 {  76,-920 }, {  77,-920 }, {  78,-920 }, {  79,-920 }, {  80,-920 },
 {  81,-920 }, {  82,-920 }, {  83,-920 }, {  84,-920 }, {  85,-920 },
 {  86,-920 }, {  87,-920 }, {  88,-920 }, {  89,-920 }, {  90,-920 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {  97,-920 }, {  98,-920 }, {  99,-920 }, { 100,-920 },
 { 101,-920 }, { 102,-920 }, { 103,-920 }, { 104,-920 }, { 105,-920 },
 { 106,-920 }, { 107,-920 }, { 108,-920 }, { 109,-920 }, { 110,-920 },
 { 111,-920 }, { 112,-920 }, { 113,-920 }, { 114,-920 }, { 115,-920 },
 { 116,-920 }, { 117,-920 }, { 118,-920 }, { 119,-920 }, { 120,-920 },
 { 121,-920 }, { 122,-920 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, { 257,  18 }, {   1,   0 },    };

static yyconst struct yy_trans_info *yy_start_state_list[3] =
    {
    &yy_transition[1],
    &yy_transition[3],
    &yy_transition[261],


    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 ".\\cptokenizer.l"
#define INITIAL 0
#define YY_NEVER_INTERACTIVE 1
#line 8 ".\\cptokenizer.l"
	#include <stdio.h>
	
	#include "cplib.h"
	#include "cptoken.h"
	
	CP_API int cp_tokenizer_tokenize(cpstring line, CpTokenList* list);
	
	static void add_token(cpstring data, int len, int pos, int line, int type);
	static void mark_line();
	static void mark_delim(const char* txt);
	static void mark_spacer(const char* txt);

	int tokpos;
	int linenum = 1;
	int tokcnt = 0;
	CpTokenList* tokenlist;
#line 1152 "lex.cptokenizer.c"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = read( fileno(yyin), (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 37 ".\\cptokenizer.l"


#line 1293 "lex.cptokenizer.c"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start_state_list[yy_start];
yy_match:
		{
		register yyconst struct yy_trans_info *yy_trans_info;

		register YY_CHAR yy_c;

		for ( yy_c = YY_SC_TO_UI(*yy_cp);
		      (yy_trans_info = &yy_current_state[(unsigned int) yy_c])->
		yy_verify == yy_c;
		      yy_c = YY_SC_TO_UI(*++yy_cp) )
			{
			yy_current_state += yy_trans_info->yy_nxt;

			if ( yy_current_state[-1].yy_nxt )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			}
		}

yy_find_action:
		yy_act = yy_current_state[-1].yy_nxt;

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos + 1;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 39 ".\\cptokenizer.l"
{	/* ignore */ }
	YY_BREAK
case 2:
#line 42 ".\\cptokenizer.l"
case 3:
YY_RULE_SETUP
#line 42 ".\\cptokenizer.l"
{	++linenum;
				tokpos = 0;
				mark_line();
			}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 47 ".\\cptokenizer.l"
{	mark_delim(yytext); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 49 ".\\cptokenizer.l"
{	mark_spacer(yytext); }
	YY_BREAK
case 6:
#line 52 ".\\cptokenizer.l"
case 7:
#line 53 ".\\cptokenizer.l"
case 8:
#line 54 ".\\cptokenizer.l"
case 9:
#line 55 ".\\cptokenizer.l"
case 10:
#line 56 ".\\cptokenizer.l"
case 11:
#line 57 ".\\cptokenizer.l"
case 12:
YY_RULE_SETUP
#line 57 ".\\cptokenizer.l"
{	++tokpos;
				add_token(yytext, yyleng, tokpos, linenum, ORD);
            }			
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 61 ".\\cptokenizer.l"
{ ++tokpos;
				add_token(yytext, yyleng, tokpos, linenum, FRACT);
			}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 65 ".\\cptokenizer.l"
{	++tokpos;
				add_token(yytext, yyleng, tokpos, linenum, NUM);
			}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 69 ".\\cptokenizer.l"
{	++tokpos;
				add_token(yytext, yyleng, tokpos, linenum, ALPHA);
			}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 73 ".\\cptokenizer.l"
{	++tokpos;
				add_token(yytext, yyleng, tokpos, linenum, ALPHANUM);
			}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 76 ".\\cptokenizer.l"
ECHO;
	YY_BREAK
#line 1448 "lex.cptokenizer.c"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start_state_list[yy_start];

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		yy_current_state += yy_current_state[(*yy_cp ? YY_SC_TO_UI(*yy_cp) : 256)].yy_nxt;
		if ( yy_current_state[-1].yy_nxt )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register int yy_c = 256;
	register yyconst struct yy_trans_info *yy_trans_info;

	yy_trans_info = &yy_current_state[(unsigned int) yy_c];
	yy_current_state += yy_trans_info->yy_nxt;
	yy_is_jam = (yy_trans_info->yy_verify != yy_c);

	if ( ! yy_is_jam )
		{
		if ( yy_current_state[-1].yy_nxt )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		}

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 76 ".\\cptokenizer.l"


int 
cp_tokenizer_tokenize(cpstring line, CpTokenList* list)
{
	YY_BUFFER_STATE buf;
	tokenlist = list;
	tokcnt = 0;
	linenum = 1;
	tokpos = 0;
	buf = yy_scan_string(line);
	yylex();
	yy_delete_buffer(buf);
	return 0;
}

static void 
add_token(cpstring data, int len, int pos, int line, int type)
{
	CpToken* token = cp_token_new(data, len, pos, line, type);
	if (token != NULL && tokenlist != NULL)
	{
		tokcnt++;
		cp_tokenlist_append(tokenlist, token);
	}
}

static void
mark_line()
{
	CpToken* token;
	token = cp_tokenlist_get(tokenlist, tokcnt-1);
	token->term = TERM_EOL;
}

static void
mark_delim(const char* txt)
{
	CpToken* token;
	token = cp_tokenlist_get(tokenlist, tokcnt-1);
	token->term = TERM_DELIM;
}

static void
mark_spacer(const char* txt)
{
	CpToken* token;
	token = cp_tokenlist_get(tokenlist, tokcnt-1);
	token->term = TERM_SPACE;
}

